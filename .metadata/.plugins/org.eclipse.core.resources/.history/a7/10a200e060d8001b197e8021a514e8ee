package me.an.mp;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("serial")
public class Monopoly extends Canvas implements Runnable
{
	public static final int WIDTH = 1000, HEIGHT = 1000;
	public static final String TITLE = "Monopoly";

	public static final int TILE_WIDTH = 78, TILE_HEIGHT = 134;

	private Thread thread;
	private boolean running = false;

	public static Monopoly Instance;

	private List<Player> players;
	private Board board;

	public Monopoly()
	{
		new Window(WIDTH, HEIGHT, TITLE, this);
	}

	public synchronized void start()
	{
		thread = new Thread(this);
		thread.start();
		running = true;
	}

	public synchronized void stop()
	{
		try
		{
			thread.join();
			running = false;
		} catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	public void run()
	{
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int frames = 0, ticks = 0;

		initGame();

		while (running)
		{
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;

			while (delta >= 1)
			{
				tick();
				delta--;
				ticks++;

				if (running)
					render();

				frames++;
			}

			if (System.currentTimeMillis() - timer > 1000)
			{
				timer += 1000;
				System.out.println("FPS: " + frames + ", Ticks: " + ticks);
				frames = 0;
				ticks = 0;
			}
		}

		stop();
	}

	private void initGame()
	{
		players = new ArrayList<Player>();
		board = new Board();

		players.add(new Player(Token.Car));
		players.add(new Player(Token.Hat));

		for (Player player : players)
			player.reposition();
		
		players.get(0).moveToTile(Board.Conneticut);
	}

	private void tick()
	{
		board.update();

		for (Player player : players)
			player.update();
	}

	private void render()
	{
		BufferStrategy bs = getBufferStrategy();
		if (bs == null)
		{
			createBufferStrategy(3);
			return;
		}

		Graphics g = bs.getDrawGraphics();

		g.setColor(Color.BLACK);
		g.fillRect(0, 0, WIDTH, HEIGHT);

		board.render(g);
		//TODO render players, dice

		for (Player player : players)
			player.render(g);

		g.dispose();
		bs.show();
	}

	public Board getBoard()
	{
		return board;
	}

	public List<Player> getPlayers()
	{
		return players;
	}

	public static void main(String[] args)
	{
		Instance = new Monopoly();
	}
}
